import numba as nb
import numpy as np


@nb.njit
def potential(x, y, z):
    return (
        (x ** 2 / 9.0 + y ** 2 / 9.0 + z ** 2 / 4.0) ** 2
        - 3.0 * np.exp(-((x - 2.0) ** 2) - (y - 2.0) ** 2)
        - 3.0 * np.exp(-((x + 2.0) ** 2) - (y + 2.0) ** 2)
        - np.exp(-(x ** 2) - (z - 1.0) ** 2)
        - np.exp(-(y ** 2) - (z + 1.0) ** 2)
    )


@nb.njit
def force(x, y, z):
    fx = (
        -4.0 / 9.0 * x * (x ** 2 / 9.0 + y ** 2 / 9.0 + z ** 2 / 4.0)
        - 6.0 * (x - 2.0) * np.exp(-((x - 2.0) ** 2) - (y - 2.0) ** 2)
        - 6.0 * (x + 2.0) * np.exp(-((x + 2.0) ** 2) - (y + 2.0) ** 2)
        - 2.0 * x * np.exp(-(x ** 2) - (z - 1.0) ** 2)
    )
    fy = (
        -4.0 / 9.0 * y * (x ** 2 / 9.0 + y ** 2 / 9.0 + z ** 2 / 4.0)
        - 6.0 * (y - 2.0) * np.exp(-((x - 2.0) ** 2) - (y - 2.0) ** 2)
        - 6.0 * (y + 2.0) * np.exp(-((x + 2.0) ** 2) - (y + 2.0) ** 2)
        - 2.0 * y * np.exp(-(y ** 2) - (z + 1.0) ** 2)
    )
    fz = (
        -z * (x ** 2 / 9.0 + y ** 2 / 9.0 + z ** 2 / 4.0)
        - 2.0 * (z - 1.0) * np.exp(-(x ** 2) - (z - 1.0) ** 2)
        - 2.0 * (z + 1.0) * np.exp(-(y ** 2) - (z + 1.0) ** 2)
    )
    return fx, fy, fz
